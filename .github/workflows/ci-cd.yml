name: Laravel CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main
  pull_request:
    branches:
      - main
      - staging

env:
  DOCKER_IMAGE: lubambi01/sos_mulher_real_web

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, bcmath, pdo_mysql
          ini-values: post_max_size=256M, upload_max_filesize=256M

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader
          npm ci

      - name: Run backend Unit tests
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_ENV: ${{ github.ref_name }}
          APP_URL: ${{ secrets.APP_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: php artisan test --testsuite=Unit || echo "‚ö†Ô∏è Unit tests failed, but continuing CI"

      - name: Build frontend assets
        run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} .
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}

  update-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref_name == 'dev'
    permissions:
      contents: write 
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Merge dev into staging
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin dev
          git merge origin/dev --allow-unrelated-histories --no-ff -m "Automated merge from dev to staging"
          git push origin staging

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, update-staging]
    if: github.ref_name == 'staging'
    steps:
      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Run Migrations and Seeders (Staging)
        run: |
          echo "Simulando deploy para o ambiente de staging..."
          docker run --rm \
            -e DB_HOST=${{ secrets.DB_HOST_STAGING }} \
            -e DB_PORT=${{ secrets.DB_PORT_STAGING }} \
            -e DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} php artisan migrate --force && \
            docker run --rm \
            -e DB_HOST=${{ secrets.DB_HOST_STAGING }} \
            -e DB_PORT=${{ secrets.DB_PORT_STAGING }} \
            -e DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} php artisan db:seed --class=AdminSeeder

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref_name == 'main'
    steps:
      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Run Migrations and Seeders (Production)
        run: |
          echo "Simulando deploy para o ambiente de produ√ß√£o..."
          docker run --rm \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} php artisan migrate --force && \
            docker run --rm \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_DATABASE=${{ secrets.DB_DATABASE }} \ 
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} php artisan db:seed --class=AdminSeeder

  deploy-notify:
    runs-on: ubuntu-latest
    needs: [build-test, docker-build, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Build and Deploy Status
        run: |
          echo "‚úÖ Pipeline finalizado para a branch ${{ github.ref_name }}."
          echo "üéâ Status de Implanta√ß√£o: ${{ needs.deploy-staging.result }} ${{ needs.deploy-production.result }}"
          echo "üåê App dispon√≠vel em: https://sosmulherrealweb-production.up.railway.app"